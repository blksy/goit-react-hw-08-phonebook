{"version":3,"file":"static/js/775.1ff14203.chunk.js","mappings":"8TACA,EAAuB,uBAAvB,EAAuD,yB,UCajDA,GAAQC,EAAAA,EAAAA,GAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAIdE,EAAS,CACbC,UAAW,CACTC,gBAAgB,OAAD,OAASC,EAAT,WAEfC,eAAgB,QAChBC,iBAAkB,YAClBC,mBAAoB,SACpBC,OAAQ,QACRC,WAAY,SAyGhB,EAtGiB,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,kBACtBC,GAAYF,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,gBAE9BE,EAAAA,EAAAA,YAAU,WACJJ,IACFK,EAAAA,GAAAA,MAAY,2BACZC,QAAQC,IAAIP,MAEb,CAACA,IAEJ,IAAMQ,EAAmB,SAAAC,GACvB,MAAwBA,EAAEC,cAAlBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MAEd,OAAQjB,GACN,IAAK,OACHC,EAAQgB,GACR,MAEF,IAAK,QACHd,EAASc,GACT,MAEF,IAAK,WACHZ,EAAYY,GACZ,MAEF,QACE,SAYN,OACE,SAAC5B,EAAA,EAAD,CAAW6B,MAAO9B,EAAOC,UAAzB,UACE,SAAC8B,EAAA,EAAD,CAAexC,MAAOA,EAAtB,UACE,kBAAMyC,UAAWC,EAAQC,OAAO,SAASC,SAX1B,SAAAR,GACnBA,EAAES,iBACF3B,EAAS4B,EAAAA,EAAAA,SAAwB,CAAEzB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,MAS5C,WACE,SAACsB,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,OACL5B,KAAK,OACLiB,MAAOjB,EACP6B,SAAUf,EACVgB,aAAa,OACbC,UAAQ,EACRC,GAAI,CAAEC,GAAI,WAEZ,SAACP,EAAA,EAAD,CACEC,MAAM,QACNC,KAAK,QACL5B,KAAK,QACLiB,MAAOf,EACP2B,SAAUf,EACVgB,aAAa,QACbC,UAAQ,EACRC,GAAI,CAAEC,GAAI,WAEZ,SAACP,EAAA,EAAD,CACEC,MAAM,WACNC,KAAK,OACL5B,KAAK,WACLiB,MAAOb,EACPyB,SAAUf,EACVgB,aAAa,WACbC,UAAQ,EACRC,GAAI,CAAEC,GAAI,WAGZ,gBAAKb,UAAWC,EAAhB,UACE,SAACa,EAAA,EAAD,CAAQN,KAAK,SAASO,QAAQ,YAAYC,KAAK,SAA/C,wBAKD3B,IACC,SAAC,KAAD,CACEd,OAAO,KACP0C,MAAM,KACNC,MAAM,SACNC,iBAAiB,OACjBC,kBAAkB,SAClBC,iBAAiB,kB","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Register/Register.module.css?88e5","components/Register/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Register_form__VD04X\",\"button\":\"Register_button__Pz4po\"};","import { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport { Container } from '@mui/material';\nimport { createTheme } from '@mui/material/styles';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { toast } from 'react-toastify';\nimport TextField from '@mui/material/TextField';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport { authSelectors } from '../../redux/auth';\nimport AuthOperations from '../../redux/auth/auth-operation';\nimport Background from '../../pictures/bg_2.jpg';\n\nimport s from './Register.module.css';\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: '#4436ac',\n      main: '#35379d',\n      dark: '#1900be',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#61ff81',\n      main: '#19a11f',\n      dark: '#022d01',\n      contrastText: '#000',\n    },\n  },\n});\nconst styles = {\n  Container: {\n    backgroundImage: `url(${Background})\n    `,\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n    height: '100vh',\n    paddingTop: '15px',\n  },\n};\nconst Register = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const isError = useSelector(authSelectors.getErrorRegister);\n  const isLoading = useSelector(authSelectors.getIsLoggedIn);\n\n  useEffect(() => {\n    if (isError) {\n      toast.error('Please, check your data');\n      console.log(isError);\n    }\n  }, [isError]);\n\n  const handleNameChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(AuthOperations.register({ name, email, password }));\n    // setName('');\n    // setEmail('');\n    // setPassword('');\n  };\n\n  return (\n    <Container style={styles.Container}>\n      <ThemeProvider theme={theme}>\n        <form className={s.form} action=\"submit\" onSubmit={handleSubmit}>\n          <TextField\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleNameChange}\n            autoComplete=\"Name\"\n            required\n            sx={{ mb: '15px' }}\n          />\n          <TextField\n            label=\"Email\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleNameChange}\n            autoComplete=\"Email\"\n            required\n            sx={{ mb: '15px' }}\n          />\n          <TextField\n            label=\"Password\"\n            type=\"text\"\n            name=\"password\"\n            value={password}\n            onChange={handleNameChange}\n            autoComplete=\"Password\"\n            required\n            sx={{ mb: '15px' }}\n          />\n\n          <div className={s.button}>\n            <Button type=\"submit\" variant=\"contained\" size=\"medium\">\n              Register\n            </Button>\n          </div>\n\n          {isLoading && (\n            <ThreeCircles\n              height=\"50\"\n              width=\"50\"\n              color=\"violet\"\n              outerCircleColor=\"grey\"\n              middleCircleColor=\"violet\"\n              innerCircleColor=\"grey\"\n            />\n          )}\n        </form>\n      </ThemeProvider>\n    </Container>\n  );\n};\n\nexport default Register;\n"],"names":["theme","createTheme","palette","primary","light","main","dark","contrastText","secondary","styles","Container","backgroundImage","Background","backgroundSize","backgroundRepeat","backgroundPosition","height","paddingTop","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","isError","useSelector","authSelectors","isLoading","useEffect","toast","console","log","handleNameChange","e","currentTarget","value","style","ThemeProvider","className","s","action","onSubmit","preventDefault","AuthOperations","TextField","label","type","onChange","autoComplete","required","sx","mb","Button","variant","size","width","color","outerCircleColor","middleCircleColor","innerCircleColor"],"sourceRoot":""}